// <auto-generated />
using System;
using AuthenticationServer.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace AuthenticationServer.Migrations
{
    [DbContext(typeof(TcuContext))]
    [Migration("20230216225123_fixedIpAddress")]
    partial class fixedIpAddress
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetUserRoles_RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("AuthenticationServer.Models.Alert", b =>
                {
                    b.Property<DateTime>("LogTimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string[]>("ObdCode")
                        .HasColumnType("character(5)[]");

                    b.Property<long>("TcuId")
                        .HasColumnType("bigint");

                    b.HasKey("LogTimeStamp", "ObdCode", "TcuId")
                        .HasName("Alerts_pkey");

                    b.HasIndex("ObdCode");

                    b.HasIndex("TcuId");

                    b.ToTable("Alerts");
                });

            modelBuilder.Entity("AuthenticationServer.Models.AspNetRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedName" }, "RoleNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("AuthenticationServer.Models.AspNetRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "RoleId" }, "IX_AspNetRoleClaims_RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("AuthenticationServer.Models.AspNetUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "NormalizedEmail" }, "EmailIndex");

                    b.HasIndex(new[] { "NormalizedUserName" }, "UserNameIndex")
                        .IsUnique();

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("AuthenticationServer.Models.AspNetUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserClaims_UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("AuthenticationServer.Models.AspNetUserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex(new[] { "UserId" }, "IX_AspNetUserLogins_UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("AuthenticationServer.Models.AspNetUserToken", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("AuthenticationServer.Models.ConnectionRequest", b =>
                {
                    b.Property<long>("TcuId")
                        .HasColumnType("bigint");

                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("VerificationTimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("TcuId", "DeviceId", "CreationTimeStamp")
                        .HasName("ConnectionRequests_pkey");

                    b.HasIndex("DeviceId");

                    b.HasIndex("StatusId");

                    b.ToTable("ConnectionRequests");
                });

            modelBuilder.Entity("AuthenticationServer.Models.ContactMethod", b =>
                {
                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .HasColumnType("text")
                        .HasColumnName("UserID");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("isPrimary");

                    b.HasKey("Type", "Value", "UserId")
                        .HasName("Contact_methods_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("ContactMethods");
                });

            modelBuilder.Entity("AuthenticationServer.Models.Device", b =>
                {
                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<string>("IpAddress")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastLoginTime")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("UserID");

                    b.HasKey("DeviceId")
                        .HasName("Device_pkey");

                    b.HasIndex("UserId");

                    b.ToTable("Device", (string)null);
                });

            modelBuilder.Entity("AuthenticationServer.Models.DevicesTcu", b =>
                {
                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<long>("TcuId")
                        .HasColumnType("bigint");

                    b.Property<bool?>("IsActive")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isActive")
                        .HasDefaultValueSql("true");

                    b.Property<bool>("IsPrimary")
                        .HasColumnType("boolean")
                        .HasColumnName("isPrimary");

                    b.HasKey("DeviceId", "TcuId")
                        .HasName("DevicesTcu_pkey");

                    b.HasIndex("TcuId");

                    b.ToTable("DevicesTcu", (string)null);
                });

            modelBuilder.Entity("AuthenticationServer.Models.LockRequest", b =>
                {
                    b.Property<long>("TcuId")
                        .HasColumnType("bigint");

                    b.Property<long>("DeviceId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTimeStamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("now()");

                    b.Property<long?>("StatusId")
                        .HasColumnType("bigint");

                    b.HasKey("TcuId", "DeviceId", "CreationTimeStamp")
                        .HasName("LockRequests_pkey");

                    b.HasIndex("DeviceId");

                    b.HasIndex("StatusId");

                    b.ToTable("LockRequests");
                });

            modelBuilder.Entity("AuthenticationServer.Models.ObdCode", b =>
                {
                    b.Property<string[]>("ObdCode1")
                        .HasColumnType("character(5)[]")
                        .HasColumnName("ObdCode");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool?>("IsGeneric")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("boolean")
                        .HasColumnName("isGeneric")
                        .HasDefaultValueSql("true");

                    b.HasKey("ObdCode1")
                        .HasName("ObdCodes_pkey");

                    b.ToTable("ObdCodes");
                });

            modelBuilder.Entity("AuthenticationServer.Models.ObdFaultAreaCode", b =>
                {
                    b.Property<char>("AreaId")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.HasKey("AreaId", "Description")
                        .HasName("ObdFaultAreaCodes_pkey");

                    b.ToTable("ObdFaultAreaCodes");
                });

            modelBuilder.Entity("AuthenticationServer.Models.ObdSubSystemCode", b =>
                {
                    b.Property<char>("SubsystemId")
                        .HasMaxLength(1)
                        .HasColumnType("character(1)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SubsystemId")
                        .HasName("ObdSubSystemCodes_pkey");

                    b.ToTable("ObdSubSystemCodes");
                });

            modelBuilder.Entity("AuthenticationServer.Models.RequestStatus", b =>
                {
                    b.Property<long>("StatusId")
                        .HasColumnType("bigint");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("StatusId")
                        .HasName("RequestStatuses_pkey");

                    b.ToTable("RequestStatuses");
                });

            modelBuilder.Entity("AuthenticationServer.Models.SoftwareVersion", b =>
                {
                    b.Property<long>("VersionId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreationTimeStamp")
                        .HasColumnType("timestamp with time zone");

                    b.Property<long?>("PreviousVersion")
                        .HasColumnType("bigint");

                    b.Property<string>("Rxwin")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("RXWIN");

                    b.HasKey("VersionId")
                        .HasName("SoftwareVersion_pkey");

                    b.HasIndex("PreviousVersion");

                    b.ToTable("SoftwareVersion", (string)null);
                });

            modelBuilder.Entity("AuthenticationServer.Models.Tcu", b =>
                {
                    b.Property<long>("TcuId")
                        .HasColumnType("bigint");

                    b.Property<long>("CurrentVersionId")
                        .HasColumnType("bigint");

                    b.Property<string[]>("IpAddress")
                        .HasColumnType("character varying(15)[]");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string[]>("Vin")
                        .IsRequired()
                        .HasColumnType("character varying(17)[]")
                        .HasColumnName("VIN");

                    b.HasKey("TcuId")
                        .HasName("TCU_pkey");

                    b.HasIndex("CurrentVersionId");

                    b.HasIndex("UserId");

                    b.ToTable("TCU", (string)null);
                });

            modelBuilder.Entity("AspNetUserRole", b =>
                {
                    b.HasOne("AuthenticationServer.Models.AspNetRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("AuthenticationServer.Models.AspNetUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("AuthenticationServer.Models.Alert", b =>
                {
                    b.HasOne("AuthenticationServer.Models.ObdCode", "ObdCodeNavigation")
                        .WithMany("Alerts")
                        .HasForeignKey("ObdCode")
                        .IsRequired()
                        .HasConstraintName("Alert_ObdCodes");

                    b.HasOne("AuthenticationServer.Models.Tcu", "Tcu")
                        .WithMany("Alerts")
                        .HasForeignKey("TcuId")
                        .IsRequired()
                        .HasConstraintName("Alert_TCU");

                    b.Navigation("ObdCodeNavigation");

                    b.Navigation("Tcu");
                });

            modelBuilder.Entity("AuthenticationServer.Models.AspNetRoleClaim", b =>
                {
                    b.HasOne("AuthenticationServer.Models.AspNetRole", "Role")
                        .WithMany("AspNetRoleClaims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("AuthenticationServer.Models.AspNetUserClaim", b =>
                {
                    b.HasOne("AuthenticationServer.Models.AspNetUser", "User")
                        .WithMany("AspNetUserClaims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthenticationServer.Models.AspNetUserLogin", b =>
                {
                    b.HasOne("AuthenticationServer.Models.AspNetUser", "User")
                        .WithMany("AspNetUserLogins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthenticationServer.Models.AspNetUserToken", b =>
                {
                    b.HasOne("AuthenticationServer.Models.AspNetUser", "User")
                        .WithMany("AspNetUserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthenticationServer.Models.ConnectionRequest", b =>
                {
                    b.HasOne("AuthenticationServer.Models.Device", "Device")
                        .WithMany("ConnectionRequests")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("ConnectionRequest_Device");

                    b.HasOne("AuthenticationServer.Models.RequestStatus", "Status")
                        .WithMany("ConnectionRequests")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("ConnectionRequest_RequestStatuses");

                    b.HasOne("AuthenticationServer.Models.Tcu", "Tcu")
                        .WithMany("ConnectionRequests")
                        .HasForeignKey("TcuId")
                        .IsRequired()
                        .HasConstraintName("ConnectionRequest_TCU");

                    b.Navigation("Device");

                    b.Navigation("Status");

                    b.Navigation("Tcu");
                });

            modelBuilder.Entity("AuthenticationServer.Models.ContactMethod", b =>
                {
                    b.HasOne("AuthenticationServer.Models.AspNetUser", "User")
                        .WithMany("ContactMethods")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("ContactMethods_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthenticationServer.Models.Device", b =>
                {
                    b.HasOne("AuthenticationServer.Models.AspNetUser", "User")
                        .WithMany("Devices")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("Devices_AspNetUsers");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthenticationServer.Models.DevicesTcu", b =>
                {
                    b.HasOne("AuthenticationServer.Models.Device", "Device")
                        .WithMany("DevicesTcus")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("Device_fkey");

                    b.HasOne("AuthenticationServer.Models.Tcu", "Tcu")
                        .WithMany("DevicesTcus")
                        .HasForeignKey("TcuId")
                        .IsRequired()
                        .HasConstraintName("TCU_fkey");

                    b.Navigation("Device");

                    b.Navigation("Tcu");
                });

            modelBuilder.Entity("AuthenticationServer.Models.LockRequest", b =>
                {
                    b.HasOne("AuthenticationServer.Models.Device", "Device")
                        .WithMany("LockRequests")
                        .HasForeignKey("DeviceId")
                        .IsRequired()
                        .HasConstraintName("LockRequest_Device");

                    b.HasOne("AuthenticationServer.Models.RequestStatus", "Status")
                        .WithMany("LockRequests")
                        .HasForeignKey("StatusId")
                        .HasConstraintName("LockRequest_RequestStatuses");

                    b.HasOne("AuthenticationServer.Models.Tcu", "Tcu")
                        .WithMany("LockRequests")
                        .HasForeignKey("TcuId")
                        .IsRequired()
                        .HasConstraintName("LockRequest_TCU");

                    b.Navigation("Device");

                    b.Navigation("Status");

                    b.Navigation("Tcu");
                });

            modelBuilder.Entity("AuthenticationServer.Models.SoftwareVersion", b =>
                {
                    b.HasOne("AuthenticationServer.Models.SoftwareVersion", "PreviousVersionNavigation")
                        .WithMany("InversePreviousVersionNavigation")
                        .HasForeignKey("PreviousVersion")
                        .HasConstraintName("SoftwareVersion_Unirary");

                    b.Navigation("PreviousVersionNavigation");
                });

            modelBuilder.Entity("AuthenticationServer.Models.Tcu", b =>
                {
                    b.HasOne("AuthenticationServer.Models.SoftwareVersion", "CurrentVersion")
                        .WithMany("Tcus")
                        .HasForeignKey("CurrentVersionId")
                        .IsRequired()
                        .HasConstraintName("TCU_SoftwareVersion");

                    b.HasOne("AuthenticationServer.Models.AspNetUser", "User")
                        .WithMany("Tcus")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("TCU_AspNetUsers");

                    b.Navigation("CurrentVersion");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AuthenticationServer.Models.AspNetRole", b =>
                {
                    b.Navigation("AspNetRoleClaims");
                });

            modelBuilder.Entity("AuthenticationServer.Models.AspNetUser", b =>
                {
                    b.Navigation("AspNetUserClaims");

                    b.Navigation("AspNetUserLogins");

                    b.Navigation("AspNetUserTokens");

                    b.Navigation("ContactMethods");

                    b.Navigation("Devices");

                    b.Navigation("Tcus");
                });

            modelBuilder.Entity("AuthenticationServer.Models.Device", b =>
                {
                    b.Navigation("ConnectionRequests");

                    b.Navigation("DevicesTcus");

                    b.Navigation("LockRequests");
                });

            modelBuilder.Entity("AuthenticationServer.Models.ObdCode", b =>
                {
                    b.Navigation("Alerts");
                });

            modelBuilder.Entity("AuthenticationServer.Models.RequestStatus", b =>
                {
                    b.Navigation("ConnectionRequests");

                    b.Navigation("LockRequests");
                });

            modelBuilder.Entity("AuthenticationServer.Models.SoftwareVersion", b =>
                {
                    b.Navigation("InversePreviousVersionNavigation");

                    b.Navigation("Tcus");
                });

            modelBuilder.Entity("AuthenticationServer.Models.Tcu", b =>
                {
                    b.Navigation("Alerts");

                    b.Navigation("ConnectionRequests");

                    b.Navigation("DevicesTcus");

                    b.Navigation("LockRequests");
                });
#pragma warning restore 612, 618
        }
    }
}
